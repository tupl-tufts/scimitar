#lang racket

(require "../contract-utils.rkt")
(require "elab.rkt")
(require "const-reduce.rkt")
(require "desugar.rkt")
(require "inline-solve-fix.rkt")
(require "inline-solve-infeasible.rkt")
(require "inline-solve-lambda.rkt")
(require "inline-solve-switch.rkt")
(require "merge-solve.rkt")
(require "lower.rkt")
(require "grammar.rkt")
(require "../cps/grammar.rkt")
(require "../cps/basis.rkt")

(provide scimitar-compile)

(define/contract (scimitar-compile e)
  (-> scimitar-expr?  cps-cexp?)
  (let* ((e (scimitar-elab e))
         (e (scimitar-const-reduce e))
         (e (scimitar-desugar e))
         (e (scimitar-inline-solve-fix e))
         (e (scimitar-inline-solve-lambda e))
         (e (scimitar-inline-solve-infeasible e))
         (e (scimitar-inline-solve-switch e))
         (e (scimitar-merge-solve e))
         (p (scimitar-lower e (curry cps-app cps-exit-sym)))
         (p (cps-basis-define p)))
    p))
