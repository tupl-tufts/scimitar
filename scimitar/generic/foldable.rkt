#lang racket/base

(require (prefix-in base- racket/base))
(require (prefix-in base- racket/function))
(require (prefix-in base- racket/list))
(require (prefix-in base- racket/vector))
(require (only-in "../util.rkt" equal/c))
(require "monoid.rkt")
(require "typeable.rkt")
(require racket/generic)
(require racket/match)

(provide
  gen:foldable
  foldable?
  foldr foldl flatten foldable->list
  null? length member argmax argmin sum product)

(define (do-foldable->list xs)
  (foldr cons '() xs))

(define (do-length xs)
  (foldr (lambda (_ a) (add1 a)) 0 xs))

(define (do-foldr f v . vs) (apply foldr f v vs))

(define ((make-sum do-foldr) xs)
  (do-foldr + 0 xs))

(define ((make-product do-foldr) xs)
  (do-foldr * 1 xs))

(define (do-flatten xs)
  (let ((same-ty? (typeof xs)))
    (define (go xs)
      (if (same-ty? xs)
        (foldr (lambda (x acc)
                 (append (go x) acc))
          (null) xs)
        `(,xs)))
    (go xs)))

(define (vec-foldr g v xs . xss)
  (for/foldr ([acc v]) ([i (in-range (base-vector-length xs))])
    (define (get-i xs) (base-vector-ref xs i))
    (apply (base-curryr g acc) (get-i xs) (base-map get-i xss))))

(define/match (unknown-foldr f v vs . vss)
  [(f v (unknown-container vs) (list (unknown-container vss) ...))
   (apply base-foldr f v vs vss)])
(define/match (unknown-foldl f v vs . vss)
  [(f v (unknown-container vs) (list (unknown-container vss) ...))
   (apply base-foldl f v vs vss)])
(define (unknown-flatten vs)
  (define/match (go vs)
    [((unknown-container (list vs ...)))
     (apply base-append (map go vs))]
    [(v) `(,v)])
  (unknown-container (go vs)))
(define/match (unknown-foldable->list vs)
  [((unknown-container vs)) vs])
(define/match (unknown-length vs)
  [((unknown-container vs))
   (base-length vs)])
(define/match (unknown-member v vs)
  [(v (unknown-container vs))
   (let ((vs (base-member v vs)))
     (and vs (unknown-container vs)))])
(define/match (unknown-argmax f vs)
  [(f (unknown-container vs))
   (base-argmax f vs)])
(define/match (unknown-argmin f vs)
  [(f (unknown-container vs))
   (base-argmin f vs)])
(define/match (unknown-sum vs)
  [((unknown-container vs))
   ((make-sum base-foldr) vs)])
(define/match (unknown-product vs)
  [((unknown-container vs))
   ((make-product base-foldr) vs)])

(define-generics foldable
  (foldr fun val foldable . more)
  (foldl fun val foldable . more)
  (flatten foldable)
  (foldable->list foldable)
  (null? foldable)
  (length foldable)
  (member val foldable)
  (argmax f foldable)
  (argmin f foldable)
  (sum foldable)
  (product foldable)
  #:fallbacks
  [(define flatten do-flatten)
   (define foldable->list do-foldable->list)
   (define length do-length)
   (define sum (make-sum do-foldr))
   (define product (make-product do-foldr))]
  #:fast-defaults
  ([listlike?
    (define foldr base-foldr)
    (define foldl base-foldl)
    (define flatten base-flatten)
    (define foldable->list values)
    (define null? base-null?)
    (define length base-length)
    (define member base-member)
    (define argmax base-argmax)
    (define argmin base-argmin)
    (define sum (make-sum base-foldr))
    (define product (make-product base-foldr))]
   [base-vector?
    (define foldr vec-foldr)
    (define (foldl g v xs)
      (for/fold ([acc v]) ((x xs)) (g x acc)))
    (define foldable->list base-vector->list)
    (define null? base-vector-empty?)
    (define length base-vector-length)
    (define member base-vector-member)
    (define argmax base-vector-argmax)
    (define argmin base-vector-argmin)
    (define sum (make-sum vec-foldr))
    (define product (make-product vec-foldr))]
   [(equal/c (null))
    (define (foldr f v xs) v)
    (define (foldl f v xs) v)
    (define flatten (base-const (null)))
    (define foldable->list (base-const '()))
    (define null? (base-const #t))
    (define length (base-const 0))
    (define (member v xs) #f)
    (define argmax base-argmax)
    (define argmin base-argmin)
    (define sum (base-const 0))
    (define product (base-const 1))]
   [unknown-container?
    (define foldr unknown-foldr)
    (define foldl unknown-foldl)
    (define flatten unknown-flatten)
    (define foldable->list unknown-foldable->list)
    (define null? (base-const #f))
    (define length unknown-length)
    (define member unknown-member)
    (define argmax unknown-argmax)
    (define argmin unknown-argmin)
    (define sum unknown-sum)
    (define product unknown-product)]
   ))
